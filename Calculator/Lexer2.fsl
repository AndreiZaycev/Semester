{
open FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme x =
    let s = LexBuffer<_>.LexemeString x
    s.Substring(1, s.Length - 2)
}

let whitespace = [ ' ' '\t' ]
let newline = ( '\n' | '\r' '\n' )

let number = ('-')? + [ '0'-'9' ]* 

let vname = '[' [ 'a'-'z' 'A'-'z' ]* ']'

rule tokenStream = parse
// --------------------------
| whitespace  { tokenStream lexbuf }
| newline  { tokenStream lexbuf }
//---------------------------
| '(' { CalcParser.LBR }
| ')' { CalcParser.RBR }
| '}' { CalcParser.RBRMOD }
| '{' { CalcParser.LBRMOD }
| '+' { CalcParser.Sum }
| '-' { CalcParser.Sub }
| '%' { CalcParser.DivRem }
| '*' { CalcParser.Mul }
| '/' { CalcParser.Div }
| '^' { CalcParser.Pow }                 
| '#' { CalcParser.Bin }
| '=' { CalcParser.EQ }
| vname { CalcParser.VNAME(lexeme lexbuf) }
| "let" { CalcParser.KW_LET }
| "print" { CalcParser.KW_PRINT }
// --------------------------
| number    { CalcParser.NUM(LexBuffer<_>.LexemeString lexbuf) }
// --------------------------
| _        { failwith ("Lexer error. Unexpected symbol: " + LexBuffer<_>.LexemeString lexbuf) }
| eof     { CalcParser.EOF }
